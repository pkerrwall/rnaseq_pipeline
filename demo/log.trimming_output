Using an excessive number of cores has a diminishing return! It is recommended not to exceed 8 cores per trimming process (you asked for 16 cores). Please consider re-specifying
Path to Cutadapt set as: 'cutadapt' (default)
Cutadapt seems to be working fine (tested command 'cutadapt --version')
Cutadapt version: 4.7
Cutadapt seems to be using Python 3! Proceeding with multi-core enabled Cutadapt using 16 cores
pigz 2.6
Parallel gzip (pigz) detected. Proceeding with multicore (de)compression using 16 cores

Proceeding with 'pigz -p 4' for decompression
To decrease CPU usage of decompression, please install 'igzip' and run again

No quality encoding type selected. Assuming that the data provided uses Sanger encoded Phred scores (default)



AUTO-DETECTING ADAPTER TYPE
===========================
Attempting to auto-detect adapter type from the first 1 million sequences of the first file (>> test_1.fq.gz <<)

Found perfect matches for the following adapter sequences:
Adapter type	Count	Sequence	Sequences analysed	Percentage
Illumina	265	AGATCGGAAGAGC	10000	2.65
Nextera	0	CTGTCTCTTATA	10000	0.00
smallRNA	0	TGGAATTCTCGG	10000	0.00
Using Illumina adapter for trimming (count: 265). Second best hit was Nextera (count: 0)

Writing report to 'test_1.fq.gz_trimming_report.txt'

SUMMARISING RUN PARAMETERS
==========================
Input filename: test_1.fq.gz
Trimming mode: paired-end
Trim Galore version: 0.6.10
Cutadapt version: 4.7
Python version: 3.10.12
Number of cores used for trimming: 16
Quality Phred score cutoff: 20
Quality encoding type selected: ASCII+33
Adapter sequence: 'AGATCGGAAGAGC' (Illumina TruSeq, Sanger iPCR; auto-detected)
Maximum trimming error rate: 0.1 (default)
Minimum required adapter overlap (stringency): 1 bp
Minimum required sequence length for both reads before a sequence pair gets removed: 20 bp
Output file(s) will be GZIP compressed

Cutadapt seems to be fairly up-to-date (version 4.7). Setting -j 16
Writing final adapter and quality trimmed output to test_1_trimmed.fq.gz


  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'AGATCGGAAGAGC' from file test_1.fq.gz <<< 
This is cutadapt 4.7 with Python 3.10.12
Command line parameters: -j 16 -e 0.1 -q 20 -O 1 -a AGATCGGAAGAGC test_1.fq.gz
Processing single-end reads on 16 cores ...
Finished in 0.299 s (29.874 µs/read; 2.01 M reads/minute).

=== Summary ===

Total reads processed:                  10,000
Reads with adapters:                     3,683 (36.8%)
Reads written (passing filters):        10,000 (100.0%)

Total basepairs processed:     1,500,000 bp
Quality-trimmed:                   2,522 bp (0.2%)
Total written (filtered):      1,481,448 bp (98.8%)

=== Adapter 1 ===

Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 3683 times

Minimum overlap: 1
No. of allowed errors:
1-9 bp: 0; 10-13 bp: 1

Bases preceding removed adapters:
  A: 32.8%
  C: 26.3%
  G: 27.1%
  T: 13.8%
  none/other: 0.0%

Overview of removed sequences
length	count	expect	max.err	error counts
1	2338	2500.0	0	2338
2	615	625.0	0	615
3	277	156.2	0	277
4	69	39.1	0	69
5	32	9.8	0	32
6	16	2.4	0	16
7	11	0.6	0	11
8	16	0.2	0	16
9	5	0.0	0	4 1
10	9	0.0	1	9
11	10	0.0	1	8 2
12	12	0.0	1	12
13	9	0.0	1	8 1
14	4	0.0	1	4
15	5	0.0	1	5
16	11	0.0	1	9 2
17	6	0.0	1	6
18	10	0.0	1	10
19	6	0.0	1	6
20	5	0.0	1	5
21	8	0.0	1	8
22	7	0.0	1	7
23	3	0.0	1	3
24	6	0.0	1	6
25	10	0.0	1	10
26	10	0.0	1	9 1
27	9	0.0	1	9
28	9	0.0	1	9
29	8	0.0	1	8
30	5	0.0	1	5
31	5	0.0	1	5
32	8	0.0	1	8
33	4	0.0	1	4
34	1	0.0	1	1
35	8	0.0	1	8
36	1	0.0	1	1
37	10	0.0	1	10
38	2	0.0	1	2
39	3	0.0	1	3
40	5	0.0	1	5
41	1	0.0	1	1
42	2	0.0	1	2
43	4	0.0	1	4
44	1	0.0	1	1
45	4	0.0	1	4
46	1	0.0	1	1
47	4	0.0	1	4
49	3	0.0	1	2 1
50	4	0.0	1	4
51	1	0.0	1	1
52	1	0.0	1	1
53	6	0.0	1	6
54	3	0.0	1	3
55	2	0.0	1	2
56	2	0.0	1	2
57	5	0.0	1	5
58	2	0.0	1	2
59	2	0.0	1	2
60	1	0.0	1	1
61	1	0.0	1	1
62	4	0.0	1	4
63	2	0.0	1	2
64	4	0.0	1	4
65	4	0.0	1	4
67	2	0.0	1	2
68	7	0.0	1	7
70	1	0.0	1	1
71	2	0.0	1	2
72	1	0.0	1	1
75	1	0.0	1	1
76	1	0.0	1	1
78	2	0.0	1	2
79	1	0.0	1	1
82	1	0.0	1	1
86	1	0.0	1	1
88	1	0.0	1	1
89	1	0.0	1	1
91	3	0.0	1	3
96	1	0.0	1	1
99	1	0.0	1	0 1
108	1	0.0	1	1
111	1	0.0	1	1
121	1	0.0	1	0 1
137	1	0.0	1	0 1

RUN STATISTICS FOR INPUT FILE: test_1.fq.gz
=============================================
10000 sequences processed in total
The length threshold of paired-end sequences gets evaluated later on (in the validation step)

Writing report to 'test_2.fq.gz_trimming_report.txt'

SUMMARISING RUN PARAMETERS
==========================
Input filename: test_2.fq.gz
Trimming mode: paired-end
Trim Galore version: 0.6.10
Cutadapt version: 4.7
Python version: 3.10.12
Number of cores used for trimming: 16
Quality Phred score cutoff: 20
Quality encoding type selected: ASCII+33
Adapter sequence: 'AGATCGGAAGAGC' (Illumina TruSeq, Sanger iPCR; auto-detected)
Maximum trimming error rate: 0.1 (default)
Minimum required adapter overlap (stringency): 1 bp
Minimum required sequence length for both reads before a sequence pair gets removed: 20 bp
Output file(s) will be GZIP compressed

Cutadapt seems to be fairly up-to-date (version 4.7). Setting -j -j 16
Writing final adapter and quality trimmed output to test_2_trimmed.fq.gz


  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'AGATCGGAAGAGC' from file test_2.fq.gz <<< 
This is cutadapt 4.7 with Python 3.10.12
Command line parameters: -j 16 -e 0.1 -q 20 -O 1 -a AGATCGGAAGAGC test_2.fq.gz
Processing single-end reads on 16 cores ...
Finished in 0.361 s (36.088 µs/read; 1.66 M reads/minute).

=== Summary ===

Total reads processed:                  10,000
Reads with adapters:                     3,633 (36.3%)
Reads written (passing filters):        10,000 (100.0%)

Total basepairs processed:     1,500,000 bp
Quality-trimmed:                   2,744 bp (0.2%)
Total written (filtered):      1,481,535 bp (98.8%)

=== Adapter 1 ===

Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 3633 times

Minimum overlap: 1
No. of allowed errors:
1-9 bp: 0; 10-13 bp: 1

Bases preceding removed adapters:
  A: 32.6%
  C: 27.1%
  G: 25.8%
  T: 14.4%
  none/other: 0.0%

Overview of removed sequences
length	count	expect	max.err	error counts
1	2446	2500.0	0	2446
2	518	625.0	0	518
3	227	156.2	0	227
4	59	39.1	0	59
5	28	9.8	0	28
6	16	2.4	0	16
7	17	0.6	0	17
8	13	0.2	0	13
9	5	0.0	0	5
10	9	0.0	1	8 1
11	11	0.0	1	10 1
12	13	0.0	1	13
13	6	0.0	1	6
14	5	0.0	1	5
15	6	0.0	1	6
16	11	0.0	1	10 1
17	10	0.0	1	10
18	5	0.0	1	4 1
19	6	0.0	1	6
20	5	0.0	1	5
21	8	0.0	1	8
22	8	0.0	1	7 1
23	2	0.0	1	2
24	7	0.0	1	6 1
25	12	0.0	1	12
26	6	0.0	1	6
27	13	0.0	1	13
28	7	0.0	1	7
29	8	0.0	1	7 1
30	5	0.0	1	5
31	4	0.0	1	4
32	8	0.0	1	7 1
33	4	0.0	1	4
34	1	0.0	1	1
35	8	0.0	1	8
36	1	0.0	1	1
37	10	0.0	1	9 1
38	3	0.0	1	3
39	3	0.0	1	3
40	6	0.0	1	5 1
42	2	0.0	1	2
43	4	0.0	1	4
44	2	0.0	1	2
45	3	0.0	1	2 1
46	1	0.0	1	1
47	2	0.0	1	2
48	2	0.0	1	2
49	2	0.0	1	2
50	4	0.0	1	4
51	1	0.0	1	1
52	1	0.0	1	1
53	4	0.0	1	4
54	4	0.0	1	4
55	3	0.0	1	3
56	2	0.0	1	2
57	2	0.0	1	2
58	4	0.0	1	4
59	3	0.0	1	3
60	1	0.0	1	1
61	1	0.0	1	1
62	4	0.0	1	4
63	2	0.0	1	2
64	2	0.0	1	2
65	2	0.0	1	2
66	4	0.0	1	4
67	3	0.0	1	3
68	2	0.0	1	2
70	2	0.0	1	2
71	2	0.0	1	2
72	3	0.0	1	3
73	1	0.0	1	1
74	2	0.0	1	2
76	1	0.0	1	1
77	2	0.0	1	1 1
79	1	0.0	1	1
86	1	0.0	1	1
88	1	0.0	1	1
89	1	0.0	1	1
90	1	0.0	1	0 1
91	3	0.0	1	3
96	1	0.0	1	1
108	1	0.0	1	1
111	1	0.0	1	1
117	1	0.0	1	0 1
133	1	0.0	1	0 1

RUN STATISTICS FOR INPUT FILE: test_2.fq.gz
=============================================
10000 sequences processed in total
The length threshold of paired-end sequences gets evaluated later on (in the validation step)

Validate paired-end files test_1_trimmed.fq.gz and test_2_trimmed.fq.gz
file_1: test_1_trimmed.fq.gz, file_2: test_2_trimmed.fq.gz


>>>>> Now validing the length of the 2 paired-end infiles: test_1_trimmed.fq.gz and test_2_trimmed.fq.gz <<<<<
Writing validated paired-end Read 1 reads to test_1_val_1.fq.gz
Writing validated paired-end Read 2 reads to test_2_val_2.fq.gz

Total number of sequences analysed: 10000

Number of sequence pairs removed because at least one read was shorter than the length cutoff (20 bp): 5 (0.05%)

Deleting both intermediate output files test_1_trimmed.fq.gz and test_2_trimmed.fq.gz

====================================================================================================

Using an excessive number of cores has a diminishing return! It is recommended not to exceed 8 cores per trimming process (you asked for 16 cores). Please consider re-specifying
Path to Cutadapt set as: 'cutadapt' (default)
Cutadapt seems to be working fine (tested command 'cutadapt --version')
Cutadapt version: 4.7
Cutadapt seems to be using Python 3! Proceeding with multi-core enabled Cutadapt using 16 cores
pigz 2.6
Parallel gzip (pigz) detected. Proceeding with multicore (de)compression using 16 cores

Proceeding with 'pigz -p 4' for decompression
To decrease CPU usage of decompression, please install 'igzip' and run again

No quality encoding type selected. Assuming that the data provided uses Sanger encoded Phred scores (default)



AUTO-DETECTING POLY-A TYPE
===========================
Attempting to auto-detect PolyA type from the first 1 million sequences of the first file (>> test_1_val_1.fq.gz <<)

Found perfect matches for the following mono-polymer sequences:
Poly-nucleotide type	Count	Sequence	Sequences analysed	Percentage
PolyT	74	TTTTTTTTTT	9995	0.74
PolyA	54	AAAAAAAAAA	9995	0.54
Using PolyT Polymer for trimming (count: 74). Second best hit was PolyA (count: 54)

Writing report to 'test_1_val_1.fq.gz_trimming_report.txt'

SUMMARISING RUN PARAMETERS
==========================
Input filename: test_1_val_1.fq.gz
Trimming mode: paired-end
Trim Galore version: 0.6.10
Cutadapt version: 4.7
Python version: 3.10.12
Number of cores used for trimming: 16
Quality Phred score cutoff: 20
Quality encoding type selected: ASCII+33
Adapter sequence: 'TTTTTTTTTTTTTTTTTTTT' (Poly-T Read 1; auto-detected)
Maximum trimming error rate: 0.1 (default)
Optional adapter 2 sequence (only used for read 2 of paired-end files): 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'
Minimum required adapter overlap (stringency): 1 bp
Minimum required sequence length for both reads before a sequence pair gets removed: 20 bp
Output file(s) will be GZIP compressed

Cutadapt seems to be fairly up-to-date (version 4.7). Setting -j 16
Writing final adapter and quality trimmed output to test_1_val_1_trimmed.fq.gz

POLY-A TRIMMING MODE; EXPERIMENTAL!!

  >>> Now performing Poly-A trimming for the adapter sequence: 'TTTTTTTTTTTTTTTTTTTT' from file test_1_val_1.fq.gz <<< 
This is cutadapt 4.7 with Python 3.10.12
Command line parameters: -j 16 -e 0.1 -O 1 -a TTTTTTTTTTTTTTTTTTTT test_1_val_1.fq.gz
Processing single-end reads on 16 cores ...
Finished in 0.325 s (32.564 µs/read; 1.84 M reads/minute).

=== Summary ===

Total reads processed:                   9,995
Reads with adapters:                     3,085 (30.9%)
Reads written (passing filters):         9,995 (100.0%)

Total basepairs processed:     1,480,837 bp
Total written (filtered):      1,471,936 bp (99.4%)

=== Adapter 1 ===

Sequence: TTTTTTTTTTTTTTTTTTTT; Type: regular 3'; Length: 20; Trimmed: 3085 times

Minimum overlap: 1
No. of allowed errors:
1-9 bp: 0; 10-19 bp: 1; 20 bp: 2

Bases preceding removed adapters:
  A: 39.4%
  C: 32.6%
  G: 27.7%
  T: 0.0%
  none/other: 0.3%

Overview of removed sequences
length	count	expect	max.err	error counts
1	2076	2498.8	0	2076
2	656	624.7	0	656
3	197	156.2	0	197
4	74	39.0	0	74
5	17	9.8	0	17
6	9	2.4	0	9
7	4	0.6	0	4
10	10	0.0	1	0 10
11	1	0.0	1	0 1
12	1	0.0	1	0 1
13	2	0.0	1	0 2
40	1	0.0	2	0 0 1
44	1	0.0	2	1
52	1	0.0	2	1
55	1	0.0	2	0 1
57	1	0.0	2	1
59	1	0.0	2	1
64	2	0.0	2	1 1
70	1	0.0	2	0 0 1
83	1	0.0	2	1
85	1	0.0	2	1
93	1	0.0	2	1
95	1	0.0	2	0 0 1
105	1	0.0	2	1
117	1	0.0	2	0 0 1
123	1	0.0	2	1
128	1	0.0	2	1
130	1	0.0	2	1
132	1	0.0	2	0 1
137	1	0.0	2	1
138	1	0.0	2	1
139	4	0.0	2	4
140	3	0.0	2	3
141	1	0.0	2	1
142	1	0.0	2	1
143	1	0.0	2	1
145	1	0.0	2	1
146	1	0.0	2	0 0 1
148	1	0.0	2	1
149	2	0.0	2	0 1 1
150	2	0.0	2	0 2

RUN STATISTICS FOR INPUT FILE: test_1_val_1.fq.gz
=============================================
9995 sequences processed in total
The length threshold of paired-end sequences gets evaluated later on (in the validation step)

Writing report to 'test_2_val_2.fq.gz_trimming_report.txt'

SUMMARISING RUN PARAMETERS
==========================
Input filename: test_2_val_2.fq.gz
Trimming mode: paired-end
Trim Galore version: 0.6.10
Cutadapt version: 4.7
Python version: 3.10.12
Number of cores used for trimming: 16
Quality Phred score cutoff: 20
Quality encoding type selected: ASCII+33
Adapter sequence: 'TTTTTTTTTTTTTTTTTTTT' (Poly-T Read 1; auto-detected)
Maximum trimming error rate: 0.1 (default)
Optional adapter 2 sequence (only used for read 2 of paired-end files): 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'
Minimum required adapter overlap (stringency): 1 bp
Minimum required sequence length for both reads before a sequence pair gets removed: 20 bp
Output file(s) will be GZIP compressed

Cutadapt seems to be fairly up-to-date (version 4.7). Setting -j -j 16
Writing final adapter and quality trimmed output to test_2_val_2_trimmed.fq.gz

POLY-A TRIMMING MODE; EXPERIMENTAL!!

  >>> Now performing Poly-A trimming for the adapter sequence: 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' from file test_2_val_2.fq.gz <<< 
This is cutadapt 4.7 with Python 3.10.12
Command line parameters: -j 16 -e 0.1 -O 1 -g AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA test_2_val_2.fq.gz
Processing single-end reads on 16 cores ...
Finished in 0.453 s (45.328 µs/read; 1.32 M reads/minute).

=== Summary ===

Total reads processed:                   9,995
Reads with adapters:                     1,839 (18.4%)
Reads written (passing filters):         9,995 (100.0%)

Total basepairs processed:     1,481,334 bp
Total written (filtered):      1,478,047 bp (99.8%)

=== Adapter 1 ===

Sequence: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; Type: regular 5'; Length: 150; Trimmed: 1839 times

Minimum overlap: 1
No. of allowed errors:
1-9 bp: 0; 10-19 bp: 1; 20-29 bp: 2; 30-39 bp: 3; 40-49 bp: 4; 50-59 bp: 5; 60-69 bp: 6; 70-79 bp: 7; 80-89 bp: 8; 90-99 bp: 9; 100-109 bp: 10; 110-119 bp: 11; 120-129 bp: 12; 130-139 bp: 13; 140-149 bp: 14; 150 bp: 15

Overview of removed sequences
length	count	expect	max.err	error counts
1	1126	2498.8	0	1126
2	346	624.7	0	346
3	162	156.2	0	162
4	124	39.0	0	124
5	36	9.8	0	36
6	35	2.4	0	35
7	4	0.6	0	4
10	2	0.0	1	0 2
11	2	0.0	1	0 2
12	1	0.0	1	0 1
15	1	0.0	1	0 1

RUN STATISTICS FOR INPUT FILE: test_2_val_2.fq.gz
=============================================
9995 sequences processed in total
The length threshold of paired-end sequences gets evaluated later on (in the validation step)

Validate paired-end files test_1_val_1_trimmed.fq.gz and test_2_val_2_trimmed.fq.gz
file_1: test_1_val_1_trimmed.fq.gz, file_2: test_2_val_2_trimmed.fq.gz


>>>>> Now validing the length of the 2 paired-end infiles: test_1_val_1_trimmed.fq.gz and test_2_val_2_trimmed.fq.gz <<<<<
Writing validated paired-end Read 1 reads to test_1_val_1_val_1.fq.gz
Writing validated paired-end Read 2 reads to test_2_val_2_val_2.fq.gz

Total number of sequences analysed: 9995

Number of sequence pairs removed because at least one read was shorter than the length cutoff (20 bp): 33 (0.33%)

Deleting both intermediate output files test_1_val_1_trimmed.fq.gz and test_2_val_2_trimmed.fq.gz

====================================================================================================

cd .
/home/wallke/rnaseq_pipeline/software/TrimGalore/trim_galore -j 16 --paired test_1.fq.gz test_2.fq.gz
/home/wallke/rnaseq_pipeline/software/TrimGalore/trim_galore --polyA -j 16 --paired test_1_val_1.fq.gz test_2_val_2.fq.gz
total script excecution time = 0:00:06.796685
